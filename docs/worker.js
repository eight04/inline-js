import{writeFileSync,unlinkSync}from"fs";import dataUriToBuffer from"data-uri-to-buffer";import{createDefaultInliner,buildDependency}from"..";async function withFiles(e,t){try{return e.forEach(e=>{"text"===e.type?writeFileSync(e.name,e.data,{flag:"wx"}):writeFileSync(e.name,dataUriToBuffer(e.data),{flag:"wx"})}),await t()}finally{e.forEach(e=>{try{unlinkSync(e.name)}catch(e){}})}}self.addEventListener("message",e=>{const t=performance.now();Promise.resolve().then(()=>withFiles(e.data.files,()=>{return createDefaultInliner().inline({name:"text",args:[e.data.files[0].name]})})).then(({content:a,children:n})=>({requestId:e.data.requestId,error:!1,data:{content:a,dependency:buildDependency(e.data.files[0].name,n),timeout:performance.now()-t}})).catch(t=>({requestId:e.data.requestId,error:!0,data:t.message})).then(e=>self.postMessage(e))});
//# sourceMappingURL=worker.js.map
