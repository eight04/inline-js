{"version":3,"file":"index.js","sources":["../src/FileEditor.vue","../src/App.vue","../src/index.js"],"sourcesContent":["<template>\r\n  <div class=\"file-editor\">\r\n    <input type=\"text\" class=\"file-name\" v-model=\"name\">\r\n    <button type=\"button\" @click=\"$emit('deleteFile', id)\">Remove</button>\n    <label>\n      <input type=\"radio\" value=\"text\" v-model=\"type\">\n      Text\n    </label>\n    <label>\n      <input type=\"radio\" value=\"binary\" v-model=\"type\">\n      Binary\n    </label>\n    <div v-show=\"file.type === 'text'\">\n      <textarea v-model=\"textData\"></textarea>\n    </div>\n    <div v-show=\"file.type === 'binary'\" @drop=\"drop\" @dragover=\"dragover\">\r\n      <div v-if=\"readingFile\">Reading the file...</div>\r\n      <div v-else-if=\"!binaryData\">Drop your file here.</div>\r\n      <div v-else>\r\n        {{fileType}}\r\n        <img :src=\"binaryData\" v-if=\"fileType.startsWith('image')\">\r\n      </div>\n    </div>\n  </div>\r\n</template>\r\n\r\n<script>\r\nfunction getDataURL(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = e => {\r\n      resolve(e.target.result);\r\n    };\r\n    reader.onerror = reject;\r\n    reader.readAsDataURL(file);2\r\n  });\r\n}\r\n\r\nexport default {\r\n  props: {\r\n    id: Number,\r\n    name: String,\r\n    type: String,\r\n    data: String\r\n  },\r\n  data() {\r\n    return {\r\n      textData: this.type === \"text\" ? this.data : \"\",\r\n      binaryData: this.type === \"binary\" ? this.data : \"\",\r\n      readingFile: false\r\n    }\r\n  },\r\n  mounted() {\r\n    for (const prop of [\"name\", \"type\"]) {\r\n      this.$watch(prop, () => this.$emit(\"fileUpdate\", this.id, prop, this[prop]));\r\n    }\r\n    for (const prop of [\"textData\", \"binaryData\"]) {\r\n      this.$watch(prop, () => {\r\n        if (this.file.type === \"text\") {\r\n          this.$emit(\"fileUpdate\", this.id, \"data\", this.textData);\r\n        } else if (this.file.type === \"binary\") {\r\n          this.$emit(\"fileUpdate\", this.id, \"data\", this.binaryData);\r\n        }\r\n      });\r\n    }\r\n  },\r\n  computed: {\r\n    fileType() {\r\n      if (!this.binaryData) {\r\n        return \"no data\";\r\n      }\r\n      const match = this.binaryData.match(/^data:(.*?)[,;]/);\r\n      if (!match || !match[1]) {\r\n        return \"unknown type\";\r\n      }\r\n      return match[1];\r\n    }\r\n  },\r\n  methods: {\r\n    drop(e) {\r\n      e.preventDefault();\r\n      const file = e.dataTransfer.files[0];\r\n      if (!file) {\r\n        return;\r\n      }\r\n      this.readingFile = true;\r\n      getDataURL(file)\r\n        .then(binary => {\r\n          this.readingFile = false;\r\n          this.binaryData = binary;\r\n        });\r\n    },\r\n    dragover(e) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n}\r\n</script>\r\n","<template>\r\n  <div id=\"app\" @file-update=\"fileUpdate\" @delete-file=\"deleteFile\">\r\n    <div class=\"file-system\">\r\n      <FileEditor\r\n        v-for=\"file in files\"\r\n        :key=\"file.id\"\r\n        v-bind=\"file\"\r\n      ></FileEditor>\r\n      <button @click=\"addFile()\" type=\"button\">Add file</button>\r\n    </div>\r\n    <div class=\"inliner\">\r\n      <div class=\"compile-error\" v-if=\"compileResult && compileResult.error\">{{compileResult.error}}</div>\r\n      <div class=\"compile-success\" v-else-if=\"compileResult\">\r\n        Compiled in {{compileResult.timeout}}ms.\r\n        \r\n        Dependency tree:\r\n        <pre>{{compileResult.dependency}}</pre>\r\n      </div>\r\n      <textarea class=\"compile-result\" readonly v-model=\"compileResult.content\"></textarea>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport FileEditor from \"./FileEditor.vue\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      files: [],\r\n      id: 0,\r\n      compileResult: null\r\n    }\r\n  },\r\n  mounted() {\r\n    let files;\r\n    let needUpdate = false;\r\n    try {\r\n      const hash = document.location.hash.slice(2);\r\n      files = JSON.parse(atob(hash));\r\n    } catch (err) {\r\n      files = [\r\n        {\r\n          type: \"text\",\r\n          name: \"entry\",\r\n          data: \"$inline('foo.txt')\"\r\n        },\r\n        {\r\n          type: \"text\",\r\n          name: \"foo.txt\",\r\n          data: \"Lorem ipsum dolor.\"\r\n        }\r\n      ];\r\n      needUpdate = true;\r\n    }\r\n    for (const file of files) {\r\n      this.addFile(file);\r\n    }\r\n    if (needUpdate) {\r\n      this.updateURL();\r\n    }\r\n    this.compile();\r\n  },\r\n  methods: {\r\n    fileUpdate(id, prop, value) {\r\n      const file = this.files.find(f => f.id === id);\r\n      if (!file) {\r\n        return;\r\n      }\r\n      file[prop] = value;\r\n      this.updateURL();\r\n    },\r\n    updateURL() {\r\n      const files = this.files.map(f => {\r\n        const newFile = Object.assign({}, f);\r\n        delete newFile.id;\r\n        return newFile;\r\n      });\r\n      const hash = btoa(JSON.stringify(files));\r\n      history.replaceState({}, \"\", `#!${hash}`);\r\n    },\r\n    getNewName() {\r\n      const names = new Set(this.files.map(f => f.name));\r\n      let name = \"file\";\r\n      let i = 1;\r\n      while (names.has(name)) {\r\n        name = \"file\" + i++;\r\n      }\r\n      return name;\r\n    },\r\n    addFile({name = this.getNewName(), data = \"\", type = \"text\"} = {}) {\r\n      this.files.push({\r\n        id: this.id++,\r\n        name,\r\n        type,\r\n        data\r\n      });\r\n    },\r\n    deleteFile(id) {\r\n      const index = this.files.findIndex(f => f.id === id);\r\n      if (index >= 0) {\r\n        this.files.splice(index, 1);\r\n      }\r\n    },\r\n    compile() {\r\n      // ...\r\n    }\r\n  },\r\n  components: {FileEditor}\r\n};\r\n</script>\r\n","import App from \"./App.vue\";\r\nnew Vue({\r\n  el: \"#app\",\r\n  render: h => h(App)\r\n});\r\n"],"names":["Vue","el","render","h","App"],"mappings":"AA2BA,6IAWA,00BAnCY,u2ICAA,m3FCFRA,KACFC,GAAI,OACJC,OAAQC,GAAKA,EAAEC"}